telemetry-url=http://fleetman-vehicle-telemetry:8080
staff-service-url=fleetman-staff-service.default.svc.cluster.local:8080

logging.level.org.springframework=INFO
logging.level.com.zaxxer=DEBUG
logging.level.root=ERROR

spring.datasource.hikari.connectionTimeout=20000
spring.datasource.hikari.maximumPoolSize=5

logging.pattern.console=%-5level %logger{36} - %msg%n


## PostgreSQL using internal-ip method. public-IP / Cloud-Sql-Auth-Proxy and Socket method not working

spring.datasource.url=jdbc:postgresql://10.83.192.3:5432/telemetry	
spring.datasource.username=postgres
spring.datasource.password=password123

#drop n create table again, good for testing, comment this in production
#spring.jpa.hibernate.ddl-auto=create

# Initialize the database since the newly created Cloud SQL database has no tables. The following flag is for Spring Boot 2.
spring.datasource.initialization-mode=always
spring.jpa.show-sql=true


## PostgreSQL using Socket method
#spring.datasource.url=jdbc:postgresql://postgres-db:5432/telemetry
#spring.datasource.url=jdbc:postgresql:///telemetry?cloudSqlInstance=awesome-anthos:us-east1:master-db&socketFactory=com.google.cloud.sql.postgres.SocketFactory&user=postgres&password=password123


## PostgreSQL using Cloud-Sql-Auth-Proxy 
# database=postgres
# spring.cloud.gcp.sql.database-name=telemetry
# spring.cloud.gcp.sql.instance-connection-name=awesome-anthos:us-east1:master-db
# spring.datasource.username=postgres
# spring.datasource.password=password123
spring.cloud.gcp.credentials.location=file://cloudsql_sa.json